$theme-background-color: #2C2C2D;
$theme-item-background-color: #2F2F31;
$theme-item-background-color-hover: #242424;
$theme-font-color: #B2AE94;

$theme-button-background: #363636;
$theme-button-color: #f5f5f5;

$theme-quick-actions-bg: #242424;

$theme-cell-empty: #242424;

$theme-perk-level-1: #383B41;
$theme-perk-level-2-3: #3F4751;
$theme-perk-level-4-5: #323336;
$theme-perk-level-max: #2F894E;
$theme-perk-level-overload: #800000;

$theme-input-background: #363636;
$theme-input-color: #f5f5f5;
$theme-input-border: #242424;

@mixin dark-mode() {
    .title,
    .subtitle {
        color: $theme-font-color;
    }

    strong {
        color: $theme-font-color;
    }

    .button.is-light {
        background-color: $theme-button-background;
        border-color: transparent;
        color: $theme-button-color;
    }

    .card {
        background: $theme-background-color;
        color: $theme-font-color;
    }

    .quick-actions {
        background: $theme-quick-actions-bg;
    }

    .item {
        background: $theme-item-background-color;

        .perk-string-items img {
            filter: unset;
        }

        &.weapon-part {
            .weapon-part-image-wrapper {
                & > img {
                    filter: invert(0);
                }
            }
        }
    }

    .build-item {

        a:hover {
            &+.build-actions {
                background: $theme-item-background-color-hover;
                color: $theme-font-color;
            }
        }

        .build-content {
            background: $theme-item-background-color;

            .build-title {
                color: $theme-font-color;
            }

            &:hover {
                background: $theme-item-background-color-hover;

                .build-title {
                    color: $theme-font-color;
                }
            }
        }

        .build-actions {
            background: $theme-item-background-color;

            .delete-action {
                cursor: pointer;

                &:hover {
                    color: $theme-font-color;
                }
            }
        }
    }

    .item:hover {
        background: $theme-item-background-color-hover;
    }

    .cells {
        .cell {
            background: $theme-item-background-color;

            &.empty img {
                background: $theme-cell-empty;
                border-color: $theme-cell-empty;
            }

            &.empty:hover {
                background: $theme-item-background-color-hover;
            }
        }
    }

    .perk-list {
        .perk-level-1 {
            background: $theme-perk-level-1;
        }

        .perk-level-2,
        .perk-level-3 {
            background: $theme-perk-level-2-3;
        }

        .perk-level-4,
        .perk-level-5 {
            background: $theme-perk-level-4-5;
        }

        .perk-max {
            background: $theme-perk-level-max;
        }

        .perk-overload {
            background: $theme-perk-level-overload;
        }
    }

    .modal {
        .button {
            background-color: $theme-button-background;
            border-color: transparent;
            color: $theme-button-color;

            strong {
                color: $theme-button-color;
            }
        }

        .modal-card-foot {
            background: $theme-quick-actions-bg;
            border-top: $theme-quick-actions-bg;

            .rc-slider-rail,
            .rc-slider-handle {
                background-color: $theme-background-color;
            }
        }
    }

    .input {
        background-color: $theme-input-background;
        color: $theme-input-color;
        border-color: $theme-input-border;
    }

    .field {
        .Select-placeholder {
            background-color: $theme-input-background;
            color: $theme-input-color;
            border-color: $theme-input-border;
        }

        .Select.is-focused:not(.is-open) > .Select-control {
            background-color: $theme-input-background;
        }

        .Select-control {
            background-color: $theme-input-background;
            color: $theme-input-color;
            border-color: $theme-input-border;
        }

        .Select-value-label {
            color: $theme-input-color !important;
        }

        .Select-input > input {
            color: $theme-input-color;
        }
    }

    .dropdown {
        .dropdown-content {
            background: $theme-input-background;
            color: $theme-input-color;
        }

        .dropdown-item {
            color: $theme-input-color;

            &.disabled {
                color: $theme-input-border;
            }
        }

        .dropdown-divider {
            background: $theme-background-color;
        }

        .dropdown-item:hover {
            background: $theme-background-color;
        }
    }

    .feature-tile .title {
        color: $theme-input-color;
    }

    .item-title-wrapper .subtitle {
        border-bottom: 1px solid $theme-input-border;
    }
}

.is-darkmode {
    @include dark-mode();
}

// my SCSS compiler doesn't like this new media query, using it as a variable works tho...
$prefers-color-scheme-scss-hack: "(prefers-color-scheme: dark)";

// if user has set a preference to see dark browsers, use dark color scheme
@media #{$prefers-color-scheme-scss-hack} {
    .primary-container:not(.is-lightmode) {
        @include dark-mode();
    }
}
